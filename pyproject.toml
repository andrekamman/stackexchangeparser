[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "stackexchange-parser"
version = "1.0.0"
description = "Convert StackExchange XML dumps to CSV or Parquet format for data analysis"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "StackExchange Parser Contributors"}
]
maintainers = [
    {name = "StackExchange Parser Contributors"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Database",
    "Topic :: Text Processing :: Markup :: XML",
]
keywords = ["stackexchange", "data-analysis", "xml", "csv", "parquet", "etl"]
requires-python = ">=3.8"
dependencies = [
    "lxml>=4.9.0,<6.0.0",
    "pyyaml>=6.0,<8.0",
]

[project.optional-dependencies]
parquet = [
    "pandas>=1.5.0,<3.0.0",
    "pyarrow>=10.0.0,<16.0.0",
]
dev = [
    "pytest>=7.0.0,<9.0.0",
    "pytest-cov>=4.0.0,<6.0.0",
    "black>=22.0.0,<25.0.0",
    "ruff>=0.1.0,<1.0.0",
    "mypy>=1.0.0,<2.0.0",
    "pre-commit>=2.20.0,<4.0.0",
]
test = [
    "pytest>=7.0.0,<9.0.0",
    "pytest-cov>=4.0.0,<6.0.0",
]
all = [
    "pandas>=1.5.0,<3.0.0",
    "pyarrow>=10.0.0,<16.0.0",
    "pytest>=7.0.0,<9.0.0",
    "pytest-cov>=4.0.0,<6.0.0",
    "black>=22.0.0,<25.0.0",
    "ruff>=0.1.0,<1.0.0",
    "mypy>=1.0.0,<2.0.0",
    "pre-commit>=2.20.0,<4.0.0",
]

[project.urls]
Homepage = "https://github.com/stackexchangeparser/stackexchangeparser"
Documentation = "https://github.com/stackexchangeparser/stackexchangeparser#readme"
Repository = "https://github.com/stackexchangeparser/stackexchangeparser"
Issues = "https://github.com/stackexchangeparser/stackexchangeparser/issues"

[project.scripts]
stackexchange-convert = "stackexchange_parser.cli:cli_main"

[tool.setuptools.packages.find]
include = ["stackexchange_parser*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
stackexchange_parser = ["../config/*.yaml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration - replaces flake8, isort, and more
[tool.ruff]
target-version = "py38"
line-length = 88
src = ["stackexchange_parser"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "S",    # bandit security
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "ERA",  # eradicate commented code
    "PL",   # pylint
]
ignore = [
    "E203",   # whitespace before ':'
    "W503",   # line break before binary operator
    "S101",   # assert allowed in tests
    "PLR0913", # too many arguments
    "PLR2004", # magic values
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # allow unused imports
"tests/*" = ["S101", "PLR2004", "ARG"]  # allow assert, magic values, unused args
"example.py" = ["T20", "S101"]  # allow print statements and asserts

[tool.ruff.lint.isort]
known-first-party = ["stackexchange_parser"]
force-sort-within-sections = true

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "lxml.*",
    "pandas.*",
    "pyarrow.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=stackexchange_parser",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["stackexchange_parser"]
omit = [
    "tests/*",
    "*/site-packages/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

